#!/usr/bin/bash

ST1="system/style/modern"
ST2="system/style/futuristic"
OS=$(uname -o)

coc_config() {
if ! hash unzip
then
   printf "Unzip not Installed :: Install it then run script again.\n"
fi
  unzip $(pwd)/archive/neococ.zip
  mkdir -p ~/.config/nvim/autoload/plugs
  printf "[\e[92mCopying code server files\e[0m] ..."
  cp -rf coc.nvim ~/.config/nvim/autoload/plugs
#  sed -i '461d' ~/.config/nvim/autoload/plugs/coc.nvim/plugin/coc.vim
  echo "Installation complete."
  rm -rf coc.nvim
}


config() {
  printf "[\e[92mSetup 'vi' as a default neovim editor\e[0m]\n\n"
if [[ $OS == *"Android"* ]]
then
  update-alternatives --config editor
  update-alternatives --config vi
else
  sudo update-alternatives --config editor
  sudo update-alternatives --config vi
fi

coc_config
# Install some autoindent
exec nvim -c "CocInstall coc-sh coc-go coc-json coc-clangd coc-css coc-perl coc-python coc-rome coc-rust-analyzer"
}

 if ! hash node &> /dev/null
 then
   printf "Nodejs not Installed :: Install it then run script again.\n"
   exit 1
 fi

 if ! hash yarn &> /dev/null
 then
   printf "Yarn not Installed :: Install it then run script again.\n"
   exit 1
 fi

 if [[ $1 == "install" ]]
 then
     if [[ $2 == "style="* ]]
     then
       style="${2#style=}"
     fi
       if [[ $style == "1" ]]
       then
         if [[ $OS == *"Android"* ]]
         then
           cp -rf $(pwd)/${ST1}/termux/nvim $HOME/.config
           config
         else
           cp -rf $(pwd)/${ST1}/linux/nvim $HOME/.config
           config
         fi
       elif [[ $style == "2" ]]
       then
         if [[ $OS == *"Android"* ]]
         then
           cp -rf $(pwd)/${ST2}/termux/nvim $HOME/.config
           config
         else
           cp -rf $(pwd)/${ST2}/linux/nvim $HOME/.config
           config
         fi
       else
         echo "eg. bash setup install style=1"
         exit 0
       fi
     else
       echo "eg. bash setup install style=1"
       exit 0
     fi
